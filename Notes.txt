Links I found useful:

nodemon: https://github.com/remy/nodemon
vite: https://vitejs.dev/guide/ 
react router: https://reactrouter.com/en/v6.3.0/getting-started/installation
react dropzone: https://github.com/react-dropzone/react-dropzone
redux toolkit: https://redux-toolkit.js.org/introduction/getting-started
redux toolkit query: https://redux-toolkit.js.org/rtk-query/overview
regression: https://github.com/tom-alexander/regression-js
mui: https://mui.com/material-ui/getting-started/overview/
mui data grid: https://mui.com/x/api/data-grid/data-grid/
recharts: https://recharts.org/en-US/
flexbox guide: https://css-tricks.com/snippets/css/a-guide-to-flexbox/
css grid cheatsheet: https://grid.malven.co/
grid-template-areas: https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas
data model diagram: https://lucid.app/users/registerOrLogin/free?showLogin=false&invitationId=inv_863ef5c2-6c3d-42ec-85da-c522ddb15430&productOpt=chart&invitationType=documentAcceptance&returnUrlOverride=%2Flucidchart%2F23d63d3a-f89c-472d-99d3-4c0a35c67816%2Fedit%3Fviewport_loc%3D81%252C175%252C856%252C919%252C0_0%26invitationId%3Dinv_863ef5c2-6c3d-42ec-85da-c522ddb15430viewport_loc%253D81%252C175%252C856%252C919%252C0_0%26invitationId%3Dinv_863ef5c2-6c3d-42ec-85da-c522ddb15430
redux dev tools: https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en
pesticide extension: https://chrome.google.com/webstore/detail/pesticide-for-chrome/bakpbgckdnepkmkeaiomhmfcnejndkbi
fly io node: https://fly.io/docs/languages-and-frameworks/node/
vercel: https://vercel.com/
docker: https://www.docker.com/products/docker-desktop/

Steps I took to make the app (You're welcome...)

Use Vite - "npm create vite@latest"
-> Vite is a build tool and development server for modern web applications. It's like create-react-app but faster when it loads up the development server
	(i.e. when running development). Create-react-app can be very slow when running big applications
-> Install "react-redux" (State management library)
-> Install "@reduxjs/toolkit" (A wrapper around redux that makes everything easy)
-> Install "react-router-dom" (Gives navigation to website)
-> Install (material ui stuff) - "@mui/material @emotion/react @emotion/styled @mui/icons-material" (All 4 are related to material ui;
	 i) Gives all material ui components
	 ii) & iii) Gives you some of the ways in which you can style the mui library.
	 iv) Gives all the icons mui has for free
-> Install "@mui/x-data-grid" (Represents the mui table which is very powerful)
-> Install "npm i -D" (-D represents dev dependencies, these are dependencies that don't need to be in the final build, 
	just so that you are importing less libraries in the final build)
-> Install "@types/react-dom" (This 'types' library is for the use of react-router-dom which needs some extra 'types' to be used with typescript)
-> Now go into the client->src folder and; 
	i)  Delete App.css
	ii) Go into App.tsx and delete everything inside the App div (If it isn't there create it) and change the className to lowercase i.e "app",
		remove the useState and delete all the imports
	ii) Delete everything inside index.css
	iv) Go to google fonts and look for the font "Inter" and grab 400, 600, 700, select @import on the LHS, 
		copy everything inside the </style> and paste it inside the index.css
	v) Inside the index .css provide the default styles for {html, body, #root, .app }
-> Do eslint configurations for the app - "npm i -D eslint eslint-config-react-app"
	-It's "-D" cause it's a dev dependency. In that it's not needed for the final build
	-The rest of the install means that it's basically setting the create-react-app initialised eslint default settings into Vite
-> Inside the client directory create a new file ".eslintrc.json" and write the code that gives the basic defaults for eslinting
	-You basically get more warnings on your errors, the erros have more descriptive solutions to help fix them
->Remove eslintrc.cjs file if it has errors
-> Create .env.local file and add "VITE_BASE_URL=http://localhost:1337"
-> For whatever reason (Do some research) typescript doesn't like environment variables so;
	- Go to tsconfig.json and inside compilerOptions at the bottom, add; "types": ["vite/client"]
	- That added setting enables the uses of the environment variables inside .env.local without errors
-> At this point, it's best to configure imports. The normal way imports are used is ./something. These are called relative imports
	- Instead set up absolute imports that are easier to read to avoid this "../../../../" and use "@" instead which starts from the src directory
	- To do this, import "npm i -D @types/node" and go to vite.config.ts file to set it up
	- Go to tsconfig.json and finish the set up by adding "paths": {"@/*": ["./src/*"]} inside compilerOptions at the top
-> Create theme.ts file inside src directory and add the various colours and settings for dark and light themes
	- So in this file there is the variable "tokens". In the design space there's "design tokens". These tokens just represent different colors (variations of different hues of the same colour)
	- To generate these hues, you can install 'Tailwind Shades' extension, highlight the colour you want i.e #b3b6c2 and do ctrl+k ctrl+g and the hues related to that color will be generated
-> Set up configurations for typescript for material ui since the theme settings are extended a little bit since custom settings have been added (the ...tokens.primary which don't exist in the mui theme settings
	-To do this, add a new file "expanded-theme.ts" inside the src directory and add some code in it
-> Configure App.tsx to use the themesettings in the theme.ts file
	-To do this, use the "useMemo" hook.
-> Set up <ThemeProvider>
	-Add a CssBaseline
-> Configure <BrowserRouter>
	-Add box component from material ui (you can pass css props directly into the component)
		-Set up <Routes>
		-Set up <Navbar/>
-> Create folder structure or folder architecture (components, scenes, state)
	-Good practice to separate "scenes" folder and "states" folder
	-scenes folder represents the various re-usable components
	-components and scenes basically represent the UI layer
	-It's good practice to separate that from the data, since in most cases the data is re-usable in multiple pages
	-states folder contains data that can be re-usable in multiple ways across the web app
	-some fancy architectures you won't need to worry about include (ducks-pattern feature based patterns, default react pattern)
	-check out this resource to learn more -> https://medium.com/geekculture/react-js-architecture-features-folder-structure-design-pattern-70b7b9103f22
	-check out this resource as well -> https://medium.com/@matthew.holman/what-is-redux-ducks-46bcb1ad04b7
	-But really the best practice is to organise folders in a way that they can be easily found
	-Try also to keep the folder structure flat as possible, i.e. avoid going in too deep with subfolders, to maintan navigability
-> Create index.tsx inside scenes>navbar>index.tsx
	-If ES7 snippets aren't working (for rafce/tsrafce) just use CTRL + ALT + R for windows (CMD + Shift + P or just use CMD + Shift + R for mac)
-> Since some styles like (display="flex", justifyContent="space-between", alignItems="center") are gonna be re-used alot, it's best practice to create a re-useable component to represent them.
	-So in the components folder add FlexBetween.tsx
-> Create index.tsx inside scenes>dashboard>index.tsx
	-use Flexbox or grid? (do research)
	-Flexbox is great for one dimensional layout i.e. One directional layout, like a navbar for instance (horizontal or vertical layout)
	-If the layout is both horizontal and vertical (two dimensional), then grid is more cleaner and easier to use.
	-check the cheat sheet above to learn more about grid layouts
	-the cheat sheet doesn't have grid areas in it though (very special)
	-grid-template-area cheat sheet included as well
-> In the components folder create DashboardBox.tsx
	-This also will be a styled component (won't need the whole tsrafce shortcut template)
-> Divide the dashboard into 3 rows
	-i.e top three boxes (a,d,g), middle three boxes (b,e,h), bottom four boxes (c,f,i,j)
	-inside, scenes>dashboard, create the three rows
-> Upto this point, typescript hasn't been used, since we haven't really interacted with data (backend)
	-but later on when API calls start getting made and you get the response, then that's when types from typescript will be used to ensure there is no bugs in the data
-> Redux toolkit
	-These are a set of utilities and tools that simplify the process of building applications using redux
	-Redux is a popular state management library for javascript applications
	-In this project, redux toolkit will be used to manage state so that state can be accessed globally
	-Redux toolkit query will be used on top of that to make API calls and so that the data can be stored in the global store easily
-> Now go to state folder and add api.ts 
	-This is where the bolierplate for the redux toolkit query will be implemented
	-"getKpis: build.query<void, void>"
	-The "<void, void>" above makes it so that we can use the endpoint without any errors, if we have no arguments yet
	-If one uses the endpoint without the "<void, void>" it throws an error (Expected 1-2 arguments but got 0) asking for arguments
-> Go to Row1.tsx and add the hook for the API call "useGetKpisQuery()"
-> Go to main.tsx and set up the Provider and Store for the API
-> Setting up the backend
	-Create the "server" directory inside the root
-> Inside the server directory in the terminal:
	-Do "npm init -y" to initialize npm packages and the package.json file with all the default settings
	-Install express "npm i express" which is the framework for node.js to handle APIs
	-Install body-parser "npm i body-parser" which handles the info that's coming from the body of a request
	-Install cors "npm i cors" which handles cross-origin resource sharing requests so that you can call from a different url
	-Install dotenv "npm i dotenv" to handle environment variables
	-Install helmet "npm i helmet" for API endpoint security
	-Install morgan "npm i morgan" for handling console logs so that any time an endpoint is hit, it will console.log info
	-Install mongoose "npm i mongoose" which is an ORM used for MongoDB
	-Install mongoose-currency "npm i mongoose-currency" which enables handling of numbers and values that are monetary (like currency values)
-> Once done installing the above;
	-Install "npm i -D nodemon" which installs nodemon as a dev dependency
		-nodemons allows for the running of the server and auto-refereshing upon a file change
-> Inside the "server" directory, create "index.js" file
-> In order to be able to use "imports" i.e "import express from..."
	-Go to package.json and under "main": "index.js" add "type":"module"
-> In order to be able to run the server-side "index.js" file;
	-Go to package.json and under "test": "echo \"Error....." add "dev": "nodemon index.js"